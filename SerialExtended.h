/******************************************************************************
 * Arduino Serial extentions.
 * The serial monitor from the arduino IDE does not support everything.
 * Use for a nearly full support for example PuTTY.
 *
 * Note: Fore more information read the class description.
 *
 ******************************************************************************
 * Sources
 * This code based on the information from a normal ASCII Table
 * and the following web page:
 * http://www.termsys.demon.co.uk/vtansi.htm
 *
 ******************************************************************************
 * Autors
 * HeinrichAD
 *
 ******************************************************************************
 * License
 * GNU General Public License v3.0, see LICENSE file.
 *
 ******************************************************************************
 * Source code
 * https://github.com/HeinrichAD/Arduino-SerialExtended
 *
******************************************************************************/


#ifndef _SerialExtended_h
#define _SerialExtended_h

#if defined(ARDUINO) && ARDUINO >= 100
#include "arduino.h"
#else
#include "WProgram.h"
#endif


/**
 * Arduino Serial extention class.
 * The serial monitor from the arduino IDE does not support everything.
 * Use for a nearly full support for example PuTTY for Windows user.
 *
 *
 * References:
 * http://www.termsys.demon.co.uk/vtansi.htm
 * 
 * ANSI/VT100 Terminal Control Escape Sequences
 *
 * Many computer terminals and terminal emulators support colour and cursor control through a system of escape sequences. One such standard is commonly referred to as ANSI Colour. Several terminal specifications are based on the ANSI colour standard, including VT100.
 *
 * The following is a partial listing of the VT100 control set.
 *
 * <ESC> represents the ASCII "escape" character, 0x1B. Bracketed tags represent modifiable decimal parameters; eg. {ROW} would be replaced by a row number.
**/
class SerialExtended {
  public:
  	//*******************************************
	//* Device Status
	//*
	//*******************************************
	//* The following codes are used for reporting terminal/display settings, and vary depending on the implementation:
	//*
	//*******************************************

	/**
	 * Query Device Code
	 * <ESC>[c
	 *
	 * Requests a Report Device Code response from the device.
	**/
	static void QueryDeviceCode();

	/**
	 * Report Device Code
	 * <ESC>[{code}0c
	 *
	 * Generated by the device in response to Query Device Code request.
	**/
	static void ReportDeviceCode(String code);

	/**
	 * Query Device Status
	 * <ESC>[5n
	 *
	 * Requests a Report Device Status response from the device.
	**/
	static void QueryDeviceStatus();

	/**
	 * Report Device OK
	 * <ESC>[0n
	 *
	 * Generated by the device in response to a Query Device Status request; indicates that device is functioning correctly.
	**/
	static void ReportDeviceOK();

	/**
	 * Report Device Failure
	 * <ESC>[3n
	 *
	 * Generated by the device in response to a Query Device Status request; indicates that device is functioning improperly.
	**/
	static void ReportDeviceFailure();

	/**
	 * Query Cursor Position
	 * <ESC>[6n
	 *
	 * Requests a Report Cursor Position response from the device.
	**/
	static void QueryCursorPosition();

	/**
	 * Report Cursor Position
	 * <ESC>[{ROW};{COLUMN}R
	 *
	 * Generated by the device in response to a Query Cursor Position request; reports current cursor position.
	**/
	static void ReportCursorPosition(int, int);


	//*******************************************
	//* Terminal Setup
	//*
	//*******************************************
	//* The h and l codes are used for setting terminal/display mode, and vary depending on the implementation.
	//* Line Wrap is one of the few setup codes that tend to be used consistently:
	//*
	//*******************************************
	
	/**
	 * Reset Device
	 * <ESC>c
	 *
	 * Reset all terminal settings to default.
	**/
	static void ResetDevice();

	/**
	 * Enable Line Wrap
	 * <ESC>[7h
	 *
	 * Text wraps to next line if longer than the length of the display area.
	**/
	static void EnableLineWrap();

	/**
	 * Disable Line Wrap
	 * <ESC>[7l
	 *
	 * Disables line wrapping.
	**/
	static void DisableLineWrap();


	//*******************************************
	//* Fonts
	//*
	//*******************************************
	//* Some terminals support multiple fonts: normal/bold, swiss/italic, etc.
	//* There are a variety of special codes for certain terminals; the following are fairly standard:
	//*
	//*******************************************

	/**
	 * Font Set G0
	 * <ESC>(
	 *
	 * Set default font.
	**/
	static void SetFontG0();

	/**
	 * Font Set G1
	 * <ESC>)
	 *
	 * Set alternate font.
	**/
	static void SetFontG1();


	//*******************************************
	//* Cursor Control
	//*
	//*******************************************

	/**
	 * Cursor Home
	 * <ESC>[{ROW};{COLUMN}H
	 *
	 * Sets the cursor position where subsequent text will begin.
	 * If no row/column parameters are provided (ie. <ESC>[H), the cursor will move to the home position, at the upper left of the screen.
	**/
	static void CursorHome();
	static void CursorHome(int, int);

	/**
	 * Cursor Up
	 * <ESC>[{COUNT}A
	 *
	 * Moves the cursor up by COUNT rows; the default count is 1.
	**/
	static void CursorUp();
	static void CursorUp(int);

	/**
	 * Cursor Down
	 * <ESC>[{COUNT}B
	 *
	 * Moves the cursor down by COUNT rows; the default count is 1.
	**/
	static void CursorDown();
	static void CursorDown(int);

	/**
	 * Cursor Forward
	 * <ESC>[{COUNT}C
	 *
	 * Moves the cursor forward by COUNT columns; the default count is 1.
	**/
	static void CursorForward();
	static void CursorForward(int);

	/**
	 * Cursor Backward
	 * <ESC>[{COUNT}D
	 *
	 * Moves the cursor backward by COUNT columns; the default count is 1.
	**/
	static void CursorBackward();
	static void CursorBackward(int);

	/**
	 * Force Cursor Position
	 * <ESC>[{ROW};{COLUMN}f
	 *
	 * Identical to Cursor Home.
	**/
	static void ForceCursorPosition(int, int);

	/**
	 * Save Cursor
	 * <ESC>[s
	 *
	 * Save current cursor position.
	**/
	static void SaveCursor();

	/**
	 * Restore/ Unsave Cursor
	 * <ESC>[u
	 *
	 * Restores cursor position after a Save Cursor.
	**/
	static void RestoreCursor();

	/**
	 * Save Cursor & Attrs
	 * <ESC>7
	 *
	 * Save current cursor position.
	**/
	static void SaveCursorAndAttrs();

	/**
	 * Restore/ Unsave Cursor & Attrs
	 * <ESC>8
	 *
	 * Restores cursor position after a Save Cursor.
	**/
	static void RestoreCursorAndAttrs();


	//*******************************************
	//* Scrolling
	//*
	//*******************************************
	
	/**
	 * Scroll Screen
	 * <ESC>[r
	 * 
	 * Enable scrolling for entire display.
	**/
	static void ScrollScreen();
	
	/**
	 * Scroll Screen
	 * <ESC>[{start};{end}r
	 * 
	 * Enable scrolling from row {start} to row {end}.
	**/
	static void ScrollScreen(int, int);
	
	/**
	 * Scroll Down
	 * <ESC>D
	 * 
	 * Scroll display down one line.
	**/
	static void ScrollDown();
	static void ScrollDown(int);
	
	/**
	 * Scroll Up
	 * <ESC>M
	 * 
	 * Scroll display up one line.
	**/
	static void ScrollUp();
	static void ScrollUp(int);

	
	//*******************************************
	//* Tab Control
	//*
	//*******************************************
	
	/**
	 * Set Tab
	 * <ESC>H
	 *
	 * Sets a tab at the current position.
	**/
	static void SetTab();
	
	/**
	 * Clear Tab
	 * <ESC>[g
	 *
	 * Clears tab at the current position.
	**/
	static void ClearTab();
	
	/**
	 * Clear All Tabs
	 * <ESC>[3g
	 *
	 * Clears all tabs.
	**/
	static void ClearAllTabs();

	
	//*******************************************
	//* Erasing Text
	//*
	//*******************************************

	/**
	 * Erase End of Line
	 * <ESC>[K
	 *
	 * Erases from the current cursor position to the end of the current line.
	**/
	static void EraseEndofLine();

	/**
	 * Erase Start of Line
	 * <ESC>[1K
	 *
	 * Erases from the current cursor position to the start of the current line.
	**/
	static void EraseStartofLine();

	/**
	 * Erase Line
	 * <ESC>[2K
	 *
	 * Erases the entire current line.
	**/
	static void EraseLine();

	/**
	 * Erase Down
	 * <ESC>[J
	 *
	 * Erases the screen from the current line down to the bottom of the screen.
	**/
	static void EraseDown();

	/**
	 * Erase Up
	 * <ESC>[1J
	 *
	 * Erases the screen from the current line up to the top of the screen.
	**/
	static void EraseUp();

	/**
	 * Erase Screen
	 * <ESC>[2J
	 *
	 * Erases the screen with the background colour and moves the cursor to home.
	**/
	static void EraseScreen();


	//*******************************************
	//* Printing
	//*
	//*******************************************
	//* Some terminals support local printing:
	//*
	//*******************************************

	/**
	 * Print Screen
	 * <ESC>[i
	 *
	 * Print the current screen.
	**/
	static void PrintScreen();

	/**
	 * Print Line
	 * <ESC>[1i
	 *
	 * Print the current line.
	**/
	static void PrintLine();

	/**
	 * Stop Print Log
	 * <ESC>[4i
	 *
	 * Disable log.
	**/
	static void StopPrintLog();

	/**
	 * Start Print Log
	 * <ESC>[5i
	 *
	 * Start log; all received text is echoed to a printer.
	**/
	static void StartPrintLog();

	
	//*******************************************
	//* Define Key
	//*
	//*******************************************

	/**
	 * Set Key Definition
	 * <ESC>[{key};"{string}"p
	 *
	 * Associates a string of text to a keyboard key.
	 * {key} indicates the key by its ASCII value in decimal.
	**/
	static void SetKeyDefinition(int, String);


	//*******************************************
	//* Set Display Attributes
	//*
	//*******************************************

	/**
	 * Set Attribute Mode
	 * <ESC>[{attr1};...;{attrn}m
	 *
	 * Sets multiple display attribute settings. The following lists standard attributes:
	 *
	 * 0	Reset all attributes
	 * 1	Bright
	 * 2	Dim
	 * 4	Underscore	
	 * 5	Blink
	 * 7	Reverse
	 * 8	Hidden
	 * 
	 *  	Foreground Colours
	 * 30	Black
	 * 31	Red
	 * 32	Green
	 * 33	Yellow
	 * 34	Blue
	 * 35	Magenta
	 * 36	Cyan
	 * 37	White
	 * 
	 *  	Background Colours
	 * 40	Black
	 * 41	Red
	 * 42	Green
	 * 43	Yellow
	 * 44	Blue
	 * 45	Magenta
	 * 46	Cyan
	 * 47	White
	**/
	static void SetAttributeMode(int);
	static void SetAttributeMode(int, int, ...);

	enum DisplayAttributes {
		Reset      = 0,
		Bright     = 1,
		Dim        = 2,
		Underscore = 4,
		Blink      = 5,
		Reverse    = 7,
		Hidden     = 8,

		// Foreground Colours
        F_Black    = 30,
        F_Red      = 31,
        F_Green    = 32,
        F_Yellow   = 33,
        F_Blue     = 34,
        F_Magenta  = 35,
        F_Cyan     = 36,
        F_White    = 37,

        // Background Colours
		B_Black    = 40,
		B_Red      = 41,
		B_Green    = 42,
		B_Yellow   = 43,
		B_Blue     = 44,
		B_Magenta  = 45,
		B_Cyan     = 46,
		B_White    = 47
	};


	//*******************************************
	//* Send ASCII Code
	//*
	//*******************************************

	/**
	 * Send ASCII Code
	**/
	static void SendASCIICode(int);
	static void SendASCIICode(int, int, ...);

	/**
	 * Send ASCII NUL
	 *
	 * Dec Hex Oct Char Desc
	 *   0   0   0  NUL null
	**/
	static void SendASCII_NUL();
	static void Null();

	/**
	 * Send ASCII SOH
	 *
	 * Dec Hex Oct Char Desc
	 *   1   1   1  SOH start of heading
	**/
	static void SendASCII_SOH();
	static void StartOfHeading();

	/**
	 * Send ASCII STX
	 *
	 * Dec Hex Oct Char Desc
	 *   2   2   2  STX start of text
	**/
	static void SendASCII_STX();
	static void StartOfText();

	/**
	 * Send ASCII ETX
	 *
	 * Dec Hex Oct Char Desc
	 *   3   3   3  ETX end of text
	**/
	static void SendASCII_ETX();
	static void EndOfText();

	/**
	 * Send ASCII EOT
	 *
	 * Dec Hex Oct Char Desc
	 *   4   4   4  EOT end of transmission
	**/
	static void SendASCII_EOT();
	static void EndOfTransmission();

	/**
	 * Send ASCII ENQ
	 *
	 * Dec Hex Oct Char Desc
	 *   5   5   5  ENQ enquiry
	**/
	static void SendASCII_ENQ();
	static void Enquiry();

	/**
	 * Send ASCII ACK
	 *
	 * Dec Hex Oct Char Desc
	 *   6   6   6  ACK acknowledge
	**/
	static void SendASCII_ACK();
	static void Acknowledge();

	/**
	 * Send ASCII BEL
	 *
	 * Dec Hex Oct Char Desc
	 *   7   7   7  BEL bell
	**/
	static void SendASCII_BEL();
	static void Bell();

	/**
	 * Send ASCII BS
	 *
	 * Dec Hex Oct Char Desc
	 *   8   8  10   BS backspace
	**/
	static void SendASCII_BS();
	static void SendASCII_BS(int);
	static void Backspace();
    static void Backspace(int);

	/**
	 * Send ASCII TAB
	 *
	 * Dec Hex Oct Char Desc
	 *   9   9  11  TAB horizontal tab
	**/
	static void SendASCII_TAB();
	static void SendASCII_TAB(int);
	static void Tab();
	static void Tab(int);

	/**
	 * Send ASCII LF
	 *
	 * Dec Hex Oct Char Desc
	 *  10   A  12   LF NL line feed, new line
	**/
	static void SendASCII_LF();
	static void SendASCII_LF(int);

	/**
	 * Send ASCII VT
	 *
	 * Dec Hex Oct Char Desc
	 *  11   B  13   VT vertical tab
	**/
	static void SendASCII_VT();
	static void SendASCII_VT(int);
	static void VerticalTab();
	static void VerticalTab(int);

	/**
	 * Send ASCII FF
	 *
	 * Dec Hex Oct Char Desc
	 *  12   C  14   FF NP from feed, new page
	**/
	static void SendASCII_FF();
	static void NewPage();

	/**
	 * Send ASCII CR
	 *
	 * Dec Hex Oct Char Desc
	 *  13   D  15   CR carriage return
	**/
	static void SendASCII_CR();
	static void SendASCII_CR(int);
	static void CarriageReturn();
	static void CarriageReturn(int);

	/**
	 * Send ASCII SO
	 *
	 * Dec Hex Oct Char Desc
	 *  14   E  16   SO shift out
	**/
	static void SendASCII_SO();
	static void SendASCII_SO(int);
	static void ShiftOut();
	static void ShiftOut(int);

	/**
	 * Send ASCII SI
	 *
	 * Dec Hex Oct Char Desc
	 *  15   F  17   SI shift in
	**/
	static void SendASCII_SI();
	static void SendASCII_SI(int);
	static void ShiftIn();
	static void ShiftIn(int);

	/**
	 * Send ASCII DLE
	 *
	 * Dec Hex Oct Char Desc
	 *  16  10  20  DLE data link escape
	**/
	static void SendASCII_DLE();
	static void DataLinkEscape();

	/**
	 * Send ASCII DC1
	 *
	 * Dec Hex Oct Char Desc
	 *  17  11  21  DC1 device control 1
	**/
	static void SendASCII_DC1();
	static void DeviceControl1();

	/**
	 * Send ASCII DC2
	 *
	 * Dec Hex Oct Char Desc
	 *  18  12  22  DC2 device control 2
	**/
	static void SendASCII_DC2();
	static void DeviceControl2();

	/**
	 * Send ASCII DC3
	 *
	 * Dec Hex Oct Char Desc
	 *  19  13  23  DC3 device control 3
	**/
	static void SendASCII_DC3();
	static void DeviceControl3();

	/**
	 * Send ASCII DC4
	 *
	 * Dec Hex Oct Char Desc
	 *  20  14  24  DC4 device control 4
	**/
	static void SendASCII_DC4();
	static void DeviceControl4();

	/**
	 * Send ASCII NAK
	 *
	 * Dec Hex Oct Char Desc
	 *  21  15  25  NAK negative acknowlagde
	**/
	static void SendASCII_NAK();
	static void NegativeAcknowlagde();

	/**
	 * Send ASCII SYN
	 *
	 * Dec Hex Oct Char Desc
	 *  22  16  26  SYN synchronous idle
	**/
	static void SendASCII_SYN();
	static void SynchronousIdle();

	/**
	 * Send ASCII ETB
	 *
	 * Dec Hex Oct Char Desc
	 *  23  17  27  ETB end of trans. block
	**/
	static void SendASCII_ETB();
	static void EndOfTransBlock();

	/**
	 * Send ASCII CAN
	 *
	 * Dec Hex Oct Char Desc
	 *  24  18  30  CAN cancle
	**/
	static void SendASCII_CAN();
	static void Cancle();

	/**
	 * Send ASCII EM
	 *
	 * Dec Hex Oct Char Desc
	 *  25  19  31   EM end of medium
	**/
	static void SendASCII_EM();
	static void EndOfMedium();

	/**
	 * Send ASCII SUB
	 *
	 * Dec Hex Oct Char Desc
	 *  26  1A  32  SUB substitute
	**/
	static void SendASCII_SUB();
	static void Substitute();

	/**
	 * Send ASCII ESC
	 *
	 * Dec Hex Oct Char Desc
	 *  27  1B  33  ESC escape
	**/
	static void SendASCII_ESC();
	static void Escape();

	/**
	 * Send ASCII FS
	 *
	 * Dec Hex Oct Char Desc
	 *  28  1C  34   FS file separator
	**/
	static void SendASCII_FS();
	static void FileSeparator();

	/**
	 * Send ASCII GS
	 *
	 * Dec Hex Oct Char Desc
	 *  29  1D  35   GS group separator
	**/
	static void SendASCII_GS();
	static void GroupSeparator();

	/**
	 * Send ASCII RS
	 *
	 * Dec Hex Oct Char Desc
	 *  30  1E  36   RS record separator
	**/
	static void SendASCII_RS();
	static void RecordSeparator();

	/**
	 * Send ASCII US
	 *
	 * Dec Hex Oct Char Desc
	 *  31  1F  37   US unit eparator
	**/
	static void SendASCII_US();
	static void UnitSeparator();


	//*******************************************
	//* Combinated commands
	//*
	//*******************************************
    static void Clear();

	static void NewLine();
	static void NewLine(int);

};

extern SerialExtended SuperSerial;

#endif
