#include "SerialExtended.h"

//*******************************************
//* Device Status
//*
//*******************************************
//* The following codes are used for reporting terminal/display settings, and vary depending on the implementation:
//*
//*******************************************

/**
 * Query Device Code
 * <ESC>[c
 *
 * Requests a Report Device Code response from the device.
**/
void SerialExtended::QueryDeviceCode() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("[c"));
}

/**
 * Report Device Code
 * <ESC>[{code}0c
 *
 * Generated by the device in response to Query Device Code request.
**/
void SerialExtended::ReportDeviceCode(String code) {
	String command = "[";
	command = command + code;
	command = command + "0c";
	SerialExtended::SendASCII_ESC();
	Serial.print(command);
}

/**
 * Query Device Status
 * <ESC>[5n
 *
 * Requests a Report Device Status response from the device.
**/
void SerialExtended::QueryDeviceStatus() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("[5n"));
}

/**
 * Report Device OK
 * <ESC>[0n
 *
 * Generated by the device in response to a Query Device Status request; indicates that device is functioning correctly.
**/
void SerialExtended::ReportDeviceOK() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("[0n"));
}

/**
 * Report Device Failure
 * <ESC>[3n
 *
 * Generated by the device in response to a Query Device Status request; indicates that device is functioning improperly.
**/
void SerialExtended::ReportDeviceFailure() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("[3n"));
}

/**
 * Query Cursor Position
 * <ESC>[6n
 *
 * Requests a Report Cursor Position response from the device.
**/
void SerialExtended::QueryCursorPosition() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("[6n"));
}

/**
 * Report Cursor Position
 * <ESC>[{ROW};{COLUMN}R
 *
 * Generated by the device in response to a Query Cursor Position request {
	
} reports current cursor position.
**/
void SerialExtended::ReportCursorPosition(int row, int col) {
	String command = "[";
	command = command + row;
	command = command + ";";
	command = command + col;
	command = command + "R";
	SerialExtended::SendASCII_ESC();
	Serial.print(command);
}


//*******************************************
//* Terminal Setup
//*
//*******************************************
//* The h and l codes are used for setting terminal/display mode, and vary depending on the implementation.
//* Line Wrap is one of the few setup codes that tend to be used consistently:
//*
//*******************************************

/**
 * Reset Device
 * <ESC>c
 *
 * Reset all terminal settings to default.
**/
void SerialExtended::ResetDevice() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("c"));
}

/**
 * Enable Line Wrap
 * <ESC>[7h
 *
 * Text wraps to next line if longer than the length of the display area.
**/
void SerialExtended::EnableLineWrap() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("[7h"));
}

/**
 * Disable Line Wrap
 * <ESC>[7l
 *
 * Disables line wrapping.
**/
void SerialExtended::DisableLineWrap() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("[7l"));
}


//*******************************************
//* Fonts
//*
//*******************************************
//* Some terminals support multiple fonts: normal/bold, swiss/italic, etc.
//* There are a variety of special codes for certain terminals; the following are fairly standard:
//*
//*******************************************

/**
 * Font Set G0
 * <ESC>(
 *
 * Set default font.
**/
void SerialExtended::SetFontG0() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("("));
}

/**
 * Font Set G1
 * <ESC>)
 *
 * Set alternate font.
**/
void SerialExtended::SetFontG1() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F(")"));
}


//*******************************************
//* Cursor Control
//*
//*******************************************

/**
 * Cursor Home
 * <ESC>[{ROW};{COLUMN}H
 *
 * Sets the cursor position where subsequent text will begin.
 * If no row/column parameters are provided (ie. <ESC>[H), the cursor will move to the home position, at the upper left of the screen.
**/
void SerialExtended::CursorHome() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("[H"));
}
void SerialExtended::CursorHome(int row, int col) {
	//String command = "[" + row + ";" + col + "H";
	String command = "[";
	command = command + row;
	command = command + ";";
	command = command + col;
	command = command + "H";
	SerialExtended::SendASCII_ESC();
	Serial.print(command);
}

/**
 * Cursor Up
 * <ESC>[{COUNT}A
 *
 * Moves the cursor up by COUNT rows; the default count is 1.
**/
void SerialExtended::CursorUp() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("[A"));
}
void SerialExtended::CursorUp(int counter) {
	//String command = "[" + counter + "A";
	String command = "[";
	command = command + counter;
	command = command + "A";
	SerialExtended::SendASCII_ESC();
	Serial.print(command);
}

/**
 * Cursor Down
 * <ESC>[{COUNT}B
 *
 * Moves the cursor down by COUNT rows; the default count is 1.
**/
void SerialExtended::CursorDown() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("[B"));
}
void SerialExtended::CursorDown(int counter) {
	//String command = "[" + counter + "B";
	String command = "[";
	command = command + counter;
	command = command + "B";
	SerialExtended::SendASCII_ESC();
	Serial.print(command);
}

/**
 * Cursor Forward
 * <ESC>[{COUNT}C
 *
 * Moves the cursor forward by COUNT columns; the default count is 1.
**/
void SerialExtended::CursorForward() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("[C"));
}
void SerialExtended::CursorForward(int counter) {
	//String command = "[" + counter + "C";
	String command = "[";
	command = command + counter;
	command = command + "C";
	SerialExtended::SendASCII_ESC();
	Serial.print(command);
}

/**
 * Cursor Backward
 * <ESC>[{COUNT}D
 *
 * Moves the cursor backward by COUNT columns; the default count is 1.
**/
void SerialExtended::CursorBackward() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("[D"));
}
void SerialExtended::CursorBackward(int counter) {
	//String command = "[" + counter + "D";
	String command = "[";
	command = command + counter;
	command = command + "D";
	SerialExtended::SendASCII_ESC();
	Serial.print(command);
}

/**
 * Force Cursor Position
 * <ESC>[{ROW};{COLUMN}f
 *
 * Identical to Cursor Home.
**/
void SerialExtended::ForceCursorPosition(int row, int col) {
	//String command = "[" + row + ";" + col + "f";
	String command = "[";
	command = command + row;
	command = command + ";";
	command = command + col;
	command = command + "f";
	SerialExtended::SendASCII_ESC();
	Serial.print(command);
}

/**
 * Save Cursor
 * <ESC>[s
 *
 * Save current cursor position.
**/
void SerialExtended::SaveCursor() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("[s"));
}

/**
 * Restore/ Unsave Cursor
 * <ESC>[u
 *
 * Restores cursor position after a Save Cursor.
**/
void SerialExtended::RestoreCursor() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("[u"));
}

/**
 * Save Cursor & Attrs
 * <ESC>7
 *
 * Save current cursor position.
**/
void SerialExtended::SaveCursorAndAttrs() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("7"));
}

/**
 * Restore/ Unsave Cursor & Attrs
 * <ESC>8
 *
 * Restores cursor position after a Save Cursor.
**/
void SerialExtended::RestoreCursorAndAttrs() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("8"));
}


//*******************************************
//* Scrolling
//*
//*******************************************

/**
 * Scroll Screen
 * <ESC>[r
 * 
 * Enable scrolling for entire display.
**/
void SerialExtended::ScrollScreen() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("[r"));
}

/**
 * Scroll Screen
 * <ESC>[{start};{end}r
 * 
 * Enable scrolling from row {start} to row {end}.
**/
void SerialExtended::ScrollScreen(int start, int end) {
	//String command = "[" + start + ";" + end + "f";
	String command = "[";
	command = command + start;
	command = command + ";";
	command = command + end;
	command = command + "f";
	SerialExtended::SendASCII_ESC();
	Serial.print(command);
}

/**
 * Scroll Down
 * <ESC>D
 * 
 * Scroll display down one line.
**/
void SerialExtended::ScrollDown() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("D"));
}
void SerialExtended::ScrollDown(int counter) {
	while (counter-- > 0) {
		SerialExtended::ScrollDown();
	}
}

/**
 * Scroll Up
 * <ESC>M
 * 
 * Scroll display up one line.
**/
void SerialExtended::ScrollUp() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("M"));
}
void SerialExtended::ScrollUp(int counter) {
	while (counter-- > 0) {
		SerialExtended::ScrollUp();
	}
}


//*******************************************
//* Tab Control
//*
//*******************************************

/**
 * Set Tab
 * <ESC>H
 *
 * Sets a tab at the current position.
**/
void SerialExtended::SetTab() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("H"));
}

/**
 * Clear Tab
 * <ESC>[g
 *
 * Clears tab at the current position.
**/
void SerialExtended::ClearTab() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("[g"));
}

/**
 * Clear All Tabs
 * <ESC>[3g
 *
 * Clears all tabs.
**/
void SerialExtended::ClearAllTabs() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("[3g"));
}


//*******************************************
//* Erasing Text
//*
//*******************************************

/**
 * Erase End of Line
 * <ESC>[K
 *
 * Erases from the current cursor position to the end of the current line.
**/
void SerialExtended::EraseEndofLine() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("[K"));
}

/**
 * Erase Start of Line
 * <ESC>[1K
 *
 * Erases from the current cursor position to the start of the current line.
**/
void SerialExtended::EraseStartofLine() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("[1K"));
}

/**
 * Erase Line
 * <ESC>[2K
 *
 * Erases the entire current line.
**/
void SerialExtended::EraseLine() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("[2K"));
}

/**
 * Erase Down
 * <ESC>[J
 *
 * Erases the screen from the current line down to the bottom of the screen.
**/
void SerialExtended::EraseDown() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("[J"));
}

/**
 * Erase Up
 * <ESC>[1J
 *
 * Erases the screen from the current line up to the top of the screen.
**/
void SerialExtended::EraseUp() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("[1J"));
}

/**
 * Erase Screen
 * <ESC>[2J
 *
 * Erases the screen with the background colour and moves the cursor to home.
**/
void SerialExtended::EraseScreen() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("[2J"));
}


//*******************************************
//* Printing
//*
//*******************************************
//* Some terminals support local printing:
//*
//*******************************************

/**
 * Print Screen
 * <ESC>[i
 *
 * Print the current screen.
**/
void SerialExtended::PrintScreen() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("[i"));
}

/**
 * Print Line
 * <ESC>[1i
 *
 * Print the current line.
**/
void SerialExtended::PrintLine() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("[1i"));
}

/**
 * Stop Print Log
 * <ESC>[4i
 *
 * Disable log.
**/
void SerialExtended::StopPrintLog() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("[4i"));
}

/**
 * Start Print Log
 * <ESC>[5i
 *
 * Start log {
	
} all received text is echoed to a printer.
**/
void SerialExtended::StartPrintLog() {
	SerialExtended::SendASCII_ESC();
	Serial.print(F("[5i"));
}


//*******************************************
//* Define Key
//*
//*******************************************

/**
 * Set Key Definition
 * <ESC>[{key};"{string}"p
 *
 * Associates a string of text to a keyboard key.
 * {key} indicates the key by its ASCII value in decimal.
**/
void SerialExtended::SetKeyDefinition(int key, String string) {
	//String command = "[" + key + ";\"" + string + "\"p";
	String command = "[";
	command = command + key;
	command = command + ";\"";
	command = command + string;
	command = command + "\"p";
	SerialExtended::SendASCII_ESC();
	Serial.print(command);
}


//*******************************************
//* Set Display Attributes
//*
//*******************************************

/**
 * Set Attribute Mode
 * <ESC>[{attr1};...;{attrn}m
 *
 * Sets multiple display attribute settings. The following lists standard attributes:
 *
 * 0	Reset all attributes
 * 1	Bright
 * 2	Dim
 * 4	Underscore	
 * 5	Blink
 * 7	Reverse
 * 8	Hidden
 * 
 *  	Foreground Colours
 * 30	Black
 * 31	Red
 * 32	Green
 * 33	Yellow
 * 34	Blue
 * 35	Magenta
 * 36	Cyan
 * 37	White
 * 
 *  	Background Colours
 * 40	Black
 * 41	Red
 * 42	Green
 * 43	Yellow
 * 44	Blue
 * 45	Magenta
 * 46	Cyan
 * 47	White
**/
void SerialExtended::SetAttributeMode(int attr) {
	String attrs = "[";
	attrs = attrs + attr;
	attrs = attrs + "m";
	SerialExtended::SendASCII_ESC();
	Serial.print(attrs);
}
void SerialExtended::SetAttributeMode(int argCount, int attr1, ...) {
	String attrs = "[";
	attrs = attrs + attr1;

	va_list args;
	va_start(args, attr1);
	for (int i = 1; i < argCount; ++i) {
		attrs = attrs + ";";
		attrs = attrs + va_arg(args, int);
	}
	va_end(args);

	attrs = attrs + "m";

	SerialExtended::SendASCII_ESC();
	Serial.print(attrs);
}


//*******************************************
//* Send ASCII Code
//*
//*******************************************

/**
 * Send ASCII Code
**/
void SerialExtended::SendASCIICode(int code) {
	Serial.write(code);
}
void SerialExtended::SendASCIICode(int argCount, int code1, ...) {
	Serial.write(code1);

	va_list args;
	va_start(args, code1);
	for (int i = 1; i < argCount; ++i) {
		SerialExtended::SendASCIICode(va_arg(args, int));
	}
	va_end(args);
}

/**
 * Send ASCII NUL
 *
 * Dec Hex Oct Char Desc
 *   0   0   0  NUL null
**/
void SerialExtended::SendASCII_NUL() {
	Serial.write(0);
}
void SerialExtended::Null() {
	SerialExtended::SendASCII_NUL();
}

/**
 * Send ASCII SOH
 *
 * Dec Hex Oct Char Desc
 *   1   1   1  SOH start of heading
**/
void SerialExtended::SendASCII_SOH() {
	Serial.write(1);
}
void SerialExtended::StartOfHeading() {
	SerialExtended::SendASCII_SOH();
}

/**
 * Send ASCII STX
 *
 * Dec Hex Oct Char Desc
 *   2   2   2  STX start of text
**/
void SerialExtended::SendASCII_STX() {
	Serial.write(2);
}
void SerialExtended::StartOfText() {
	SerialExtended::SendASCII_STX();
}

/**
 * Send ASCII ETX
 *
 * Dec Hex Oct Char Desc
 *   3   3   3  ETX end of text
**/
void SerialExtended::SendASCII_ETX() {
	Serial.write(3);
}
void SerialExtended::EndOfText() {
	SerialExtended::SendASCII_ETX();
}

/**
 * Send ASCII EOT
 *
 * Dec Hex Oct Char Desc
 *   4   4   4  EOT end of transmission
**/
void SerialExtended::SendASCII_EOT() {
	Serial.write(4);
}
void SerialExtended::EndOfTransmission() {
	SerialExtended::SendASCII_EOT();
}

/**
 * Send ASCII ENQ
 *
 * Dec Hex Oct Char Desc
 *   5   5   5  ENQ enquiry
**/
void SerialExtended::SendASCII_ENQ() {
	Serial.write(4);
}
void SerialExtended::Enquiry() {
	SerialExtended::SendASCII_ENQ();
}

/**
 * Send ASCII ACK
 *
 * Dec Hex Oct Char Desc
 *   6   6   6  ACK acknowledge
**/
void SerialExtended::SendASCII_ACK() {
	Serial.write(6);
}
void SerialExtended::Acknowledge() {
	SerialExtended::SendASCII_ACK();
}

/**
 * Send ASCII BEL
 *
 * Dec Hex Oct Char Desc
 *   7   7   7  BEL bell
**/
void SerialExtended::SendASCII_BEL() {
	Serial.write(7);
}
void SerialExtended::Bell() {
	SerialExtended::SendASCII_BEL();
}

/**
 * Send ASCII BS
 *
 * Dec Hex Oct Char Desc
 *   8   8  10   BS backspace
**/
void SerialExtended::SendASCII_BS() {
	SerialExtended::SendASCII_BS(1);
}
void SerialExtended::SendASCII_BS(int counter) {
	while (counter-- > 0) {
		Serial.write(8);
	}
}
void SerialExtended::Backspace() {
	SerialExtended::SendASCII_BS();
}
void SerialExtended::Backspace(int counter) {
	SerialExtended::SendASCII_BS(counter);
}

/**
 * Send ASCII TAB
 *
 * Dec Hex Oct Char Desc
 *   9   9  11  TAB horizontal tab
**/
void SerialExtended::SendASCII_TAB() {
	SerialExtended::SendASCII_TAB(1);
}
void SerialExtended::SendASCII_TAB(int counter) {
	while (counter-- > 0) {
		Serial.write(9);
	}
}
void SerialExtended::Tab() {
	SerialExtended::SendASCII_TAB();
}
void SerialExtended::Tab(int counter) {
	SerialExtended::SendASCII_TAB(counter);
}

/**
 * Send ASCII LF
 *
 * Dec Hex Oct Char Desc
 *  10   A  12   LF NL line feed, new line
**/
void SerialExtended::SendASCII_LF() {
	SerialExtended::SendASCII_LF(1);
}
void SerialExtended::SendASCII_LF(int counter) {
	while (counter-- > 0) {
		Serial.write(10);
	}
}

/**
 * Send ASCII VT
 *
 * Dec Hex Oct Char Desc
 *  11   B  13   VT vertical tab
**/
void SerialExtended::SendASCII_VT() {
	SerialExtended::SendASCII_VT(1);
}
void SerialExtended::SendASCII_VT(int counter) {
	while (counter-- > 0) {
		Serial.write(11);
	}
}
void SerialExtended::VerticalTab() {
	SerialExtended::SendASCII_VT();
}
void SerialExtended::VerticalTab(int counter) {
	SerialExtended::SendASCII_VT(counter);
}

/**
 * Send ASCII FF
 *
 * Dec Hex Oct Char Desc
 *  12   C  14   FF NP from feed, new page
**/
void SerialExtended::SendASCII_FF() {
	Serial.write(12);
}
void SerialExtended::NewPage() {
	SerialExtended::SendASCII_FF();
}

/**
 * Send ASCII CR
 *
 * Dec Hex Oct Char Desc
 *  13   D  15   CR carriage return
**/
void SerialExtended::SendASCII_CR() {
	SerialExtended::SendASCII_CR(1);
}
void SerialExtended::SendASCII_CR(int counter) {
	while (counter-- > 0) {
		Serial.write(13);
	}
}
void SerialExtended::CarriageReturn() {
	SerialExtended::SendASCII_CR();
}
void SerialExtended::CarriageReturn(int counter) {
	SerialExtended::SendASCII_CR(counter);
}

/**
 * Send ASCII SO
 *
 * Dec Hex Oct Char Desc
 *  14   E  16   SO shift out
**/
void SerialExtended::SendASCII_SO() {
	SerialExtended::SendASCII_SO(1);
}
void SerialExtended::SendASCII_SO(int counter) {
	while (counter-- > 0) {
		Serial.write(14);
	}
}
void SerialExtended::ShiftOut() {
	SerialExtended::SendASCII_SO();
}
void SerialExtended::ShiftOut(int counter) {
	SerialExtended::SendASCII_SO(counter);
}

/**
 * Send ASCII SI
 *
 * Dec Hex Oct Char Desc
 *  15   F  17   SI shift in
**/
void SerialExtended::SendASCII_SI() {
	SerialExtended::SendASCII_SI(1);
}
void SerialExtended::SendASCII_SI(int counter) {
	while (counter-- > 0) {
		Serial.write(15);
	}
}
void SerialExtended::ShiftIn() {
	SerialExtended::SendASCII_SI();
}
void SerialExtended::ShiftIn(int counter) {
	SerialExtended::SendASCII_SI(counter);
}

/**
 * Send ASCII DLE
 *
 * Dec Hex Oct Char Desc
 *  16  10  20  DLE data link escape
**/
void SerialExtended::SendASCII_DLE() {
	Serial.write(16);
}
void SerialExtended::DataLinkEscape() {
	SerialExtended::SendASCII_DLE();
}

/**
 * Send ASCII DC1
 *
 * Dec Hex Oct Char Desc
 *  17  11  21  DC1 device control 1
**/
void SerialExtended::SendASCII_DC1() {
	Serial.write(17);
}
void SerialExtended::DeviceControl1() {
	SerialExtended::SendASCII_DC1();
}

/**
 * Send ASCII DC2
 *
 * Dec Hex Oct Char Desc
 *  18  12  22  DC2 device control 2
**/
void SerialExtended::SendASCII_DC2() {
	Serial.write(18);
}
void SerialExtended::DeviceControl2() {
	SerialExtended::SendASCII_DC2();
}

/**
 * Send ASCII DC3
 *
 * Dec Hex Oct Char Desc
 *  19  13  23  DC3 device control 3
**/
void SerialExtended::SendASCII_DC3() {
	Serial.write(19);
}
void SerialExtended::DeviceControl3() {
	SerialExtended::SendASCII_DC3();
}

/**
 * Send ASCII DC4
 *
 * Dec Hex Oct Char Desc
 *  20  14  24  DC4 device control 4
**/
void SerialExtended::SendASCII_DC4() {
	Serial.write(20);
}
void SerialExtended::DeviceControl4() {
	SerialExtended::SendASCII_DC4();
}

/**
 * Send ASCII NAK
 *
 * Dec Hex Oct Char Desc
 *  21  15  25  NAK negative acknowlagde
**/
void SerialExtended::SendASCII_NAK() {
	Serial.write(21);
}
void SerialExtended::NegativeAcknowlagde() {
	SerialExtended::SendASCII_NAK();
}

/**
 * Send ASCII SYN
 *
 * Dec Hex Oct Char Desc
 *  22  16  26  SYN synchronous idle
**/
void SerialExtended::SendASCII_SYN() {
	Serial.write(22);
}
void SerialExtended::SynchronousIdle() {
	SerialExtended::SendASCII_SYN();
}

/**
 * Send ASCII ETB
 *
 * Dec Hex Oct Char Desc
 *  23  17  27  ETB end of trans. block
**/
void SerialExtended::SendASCII_ETB() {
	Serial.write(23);
}
void SerialExtended::EndOfTransBlock() {
	SerialExtended::SendASCII_ETB();
}

/**
 * Send ASCII CAN
 *
 * Dec Hex Oct Char Desc
 *  24  18  30  CAN cancle
**/
void SerialExtended::SendASCII_CAN() {
	Serial.write(24);
}
void SerialExtended::Cancle() {
	SerialExtended::SendASCII_CAN();
}

/**
 * Send ASCII EM
 *
 * Dec Hex Oct Char Desc
 *  25  19  31   EM end of medium
**/
void SerialExtended::SendASCII_EM() {
	Serial.write(25);
}
void SerialExtended::EndOfMedium() {
	SerialExtended::SendASCII_EM();
}

/**
 * Send ASCII SUB
 *
 * Dec Hex Oct Char Desc
 *  26  1A  32  SUB substitute
**/
void SerialExtended::SendASCII_SUB() {
	Serial.write(26);
}
void SerialExtended::Substitute() {
	SerialExtended::SendASCII_SUB();
}

/**
 * Send ASCII ESC
 *
 * Dec Hex Oct Char Desc
 *  27  1B  33  ESC escape
**/
void SerialExtended::SendASCII_ESC() {
	Serial.write(27);
}
void SerialExtended::Escape() {
	SerialExtended::SendASCII_ESC();
}

/**
 * Send ASCII FS
 *
 * Dec Hex Oct Char Desc
 *  28  1C  34   FS file separator
**/
void SerialExtended::SendASCII_FS() {
	Serial.write(28);
}
void SerialExtended::FileSeparator() {
	SerialExtended::SendASCII_FS();
}

/**
 * Send ASCII GS
 *
 * Dec Hex Oct Char Desc
 *  29  1D  35   GS group separator
**/
void SerialExtended::SendASCII_GS() {
	Serial.write(29);
}
void SerialExtended::GroupSeparator() {
	SerialExtended::SendASCII_GS();
}

/**
 * Send ASCII RS
 *
 * Dec Hex Oct Char Desc
 *  30  1E  36   RS record separator
**/
void SerialExtended::SendASCII_RS() {
	Serial.write(30);
}
void SerialExtended::RecordSeparator() {
	SerialExtended::SendASCII_RS();
}

/**
 * Send ASCII US
 *
 * Dec Hex Oct Char Desc
 *  31  1F  37   US unit eparator
**/
void SerialExtended::SendASCII_US() {
	Serial.write(31);
}
void SerialExtended::UnitSeparator() {
	SerialExtended::SendASCII_US();
}


//*******************************************
//* Combinated commands
//*
//*******************************************
void SerialExtended::Clear() {
	SerialExtended::EraseScreen();
	SerialExtended::CursorHome();
}


void SerialExtended::NewLine() {
	SerialExtended::SendASCII_CR();
	SerialExtended::SendASCII_LF();
}
void SerialExtended::NewLine(int counter) {
	SerialExtended::SendASCII_CR();
	SerialExtended::SendASCII_LF(counter);
}
